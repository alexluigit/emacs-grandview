;;; init.el --- -*- lexical-binding: t -*-

(defvar ale-debug-p t)
(defvar ale-init-directory (file-name-directory user-init-file))
(defvar ale-cache-dir (concat user-emacs-directory "ale/"))
(defvar ale-extensions-dir (concat ale-cache-dir "extensions/"))
(defvar ale-autoload-file (concat ale-cache-dir "ale-autoload.el"))
(defvar ale-autoload-directories `(,(concat ale-init-directory "autoload/")
                                   ,ale-extensions-dir))
(defvar ale-proxy '(("https" . "127.0.0.1:1088")))

(load (concat ale-init-directory "init-package.el") nil t)

(unless (file-exists-p ale-cache-dir) (make-directory ale-cache-dir))

(let ((target-minimal (concat ale-cache-dir "ale-minimal.el"))
      (target-full (concat ale-cache-dir "ale-full.el")))
  (unless (file-exists-p target-full)
    (autoload 'ale-bootstrap-tangle (concat ale-init-directory "autoload/bootstrap"))
    (ale-bootstrap-tangle t))
  (unless (file-exists-p ale-autoload-file)
    (autoload 'ale-bootstrap-gen-autoloads (concat ale-init-directory "autoload/bootstrap"))
    (ale-bootstrap-gen-autoloads))
  (load ale-autoload-file nil t)
  (require 'core-editor)
  (require 'core-completion)
  (require 'core-ui)
  (require 'core-bindings)
  (load target-minimal nil t)
  (when (daemonp) (load target-full nil t)))
