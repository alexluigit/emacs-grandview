;;; core-bindings.el --- -*- lexical-binding: t -*-

(define-prefix-command 'ale-files-map)
(define-prefix-command 'ale-elisp-map)
(define-prefix-command 'ale-consult-map)
(define-prefix-command 'ale-utils-map)
(define-prefix-command 'ale-org-map)
(defalias 'project-map project-prefix-map)
(defalias 'tab-map tab-prefix-map)
(defalias 'register-map ctl-x-r-map)
(autoload 'awesome-tab-ace-jump "awesome-tab")
(defcustom ale-local-leader-key "C-x x SPC"
  "Another Leader key trigger")

(use-package meow
  :after-call emacs-startup-hook
  :hook (emacs-startup . meow-global-mode)
  :bind
  (("<escape>" . ale-escape)
   ("C-;" . exchange-point-and-mark)
   ("<C-i>" . better-jumper-jump-forward)
   ("C-o" . better-jumper-jump-backward)
   ("C-x C-d" . ale-ispell-word)
   ("M-i" . awesome-tab-ace-jump)
   ("M-o" . ace-select-window)
   ("M-SPC" . ale-monocle) ; replaced `just-one-space'
   ("M-%" . anzu-isearch-query-replace)
   :map minibuffer-local-map
   ("S-<return>" . ale-files-other-window)
   ("C-u" . ale-kill-whole-line)
   ("<C-i>" . forward-char)
   ("C-o" . backward-char)
   :map ale-files-map
   ("." . ale-files-dotfiles)
   ("e" . ale-files-edit-emacs-config)
   ("u" . ale-files-in-user-dirs)
   ("o" . ale-files-browse-all-directories)
   ("r" . ale-files-rename-file-and-buffer)
   ("l" . find-library)
   :map ale-elisp-map
   ("e" . eval-last-sexp)
   ("x" . eval-expression)
   ("f" . eval-defun)
   ("u" . ale-unadvice)
   ("m" . ale-show-messages)
   ("<backspace>" . ale-erase-messages)
   :map ale-utils-map
   ("d" . ale-insert-date)
   ("t" . ale-frame-adjust-transparency)
   ("=" . count-words)
   :map meow-insert-state-keymap
   ("<escape>" . ale-escape)
   ("C-u" . ale-kill-whole-line)
   ("<C-i>" . ale-insert-ctrl-i)
   ("C-o" . ale-insert-ctrl-o)
   :map meow-motion-state-keymap
   ("/" . consult-line)
   ("<escape>" . ale-escape)
   :map meow-leader-keymap
   ("0" . delete-window)
   ("1" . delete-other-windows)
   ("2" . ale-split-window-below)
   ("3" . ale-split-window-right)
   ("4" . ctl-x-4-prefix)
   ("5" . ctl-x-5-prefix)
   ("6" . register-map)
   ("7" . project-map)
   ("8" . insert-char)
   ("9" . tab-map)
   ("[" . awesome-tab-backward-tab)
   ("]" . awesome-tab-forward-tab)
   ("SPC" . switch-to-buffer)
   ("?" . describe-keymap)
   ("/" . describe-symbol)
   (";" . ale-comment-or-uncomment-region)
   ("e" . ale-elisp-map)
   ("f" . ale-files-map)
   ("i" . list-buffers)
   ("k" . kill-this-buffer)
   ("o" . ale-org-map)
   ("p" . ale-project-find-file)
   ("t" . ale-consult-map)
   ("u" . ale-utils-map)
   ("w" . save-buffer)
   ("z" . window-toggle-side-windows)
   :map meow-normal-state-keymap
   ("0" . meow-digit-argument)
   ("1" . meow-digit-argument)
   ("2" . meow-digit-argument)
   ("3" . meow-digit-argument)
   ("4" . meow-digit-argument)
   ("5" . meow-digit-argument)
   ("6" . meow-digit-argument)
   ("7" . meow-digit-argument)
   ("8" . meow-digit-argument)
   ("9" . meow-digit-argument)
   ("/" . consult-line)
   ("%" . ale-match-paren)
   ("`" . negative-argument)
   (";" . meow-reverse)
   ("," . meow-inner-of-thing)
   ("." . meow-bounds-of-thing)
   ("<" . beginning-of-buffer)
   (">" . end-of-buffer)
   ("[" . good-scroll-down-full-screen)
   ("]" . good-scroll-up-full-screen)
   ("-" . meow-pop)
   ("_" . meow-pop-all-selection)
   ("=" . ale-query-replace)
   ("+" . anzu-query-replace-regexp)
   ("'" . meow-end-of-thing)
   ("\\" . meow-pop-search)
   ("^" . meow-last-buffer)
   ("<backspace>" . meow-beginning-of-thing)
   ("a" . ale-insert)
   ("A" . ale-insert-at-first-non-whitespace)
   ("b" . meow-back-word)
   ("B" . meow-back-symbol)
   ("c" . meow-change)
   ("C" . meow-change-save)
   ("d" . meow-delete)
   ("e" . meow-line)
   ("E" . ale-inner-line)
   ("f" . meow-next-word)
   ("F" . meow-next-symbol)
   ("g" . ale-files-update)
   ("h" . embrace-commander)
   ("i" . forward-char)
   ("j" . ale-top-join-line)
   ("J" . meow-join)
   ("k" . meow-kill)
   ("K" . meow-kmacro-matches)
   ("l" . meow-kmacro-lines)
   ("m" . meow-mark-word)
   ("M" . meow-mark-symbol)
   ("n" . ale-next-line)
   ("N" . meow-next-expand)
   ("o" . backward-char)
   ("p" . ale-prev-line)
   ("P" . meow-prev-expand)
   ("q" . meow-quit)
   ("r" . meow-search)
   ("s" . meow-open-below)
   ("S" . meow-open-above)
   ("t" . avy-goto-char-timer)
   ("T" . avy-resume)
   ("u" . undo)
   ("U" . undo-redo)
   ("v" . meow-visit)
   ("w" . meow-block)
   ("W" . meow-block-expand)
   ("x" . ale-save)
   ("y" . meow-replace)
   ("Y" . meow-yank-pop)
   ("z" . meow-grab)
   ("Z" . meow-swap-grab))
  :config
  (advice-add 'meow--maybe-highlight-num-positions :override #'ignore)
  (meow--thing-register 'tag #'ale--inner-of-tag #'ale--bounds-of-tag)
  (meow-setup-line-number)
  (define-key meow-motion-state-keymap (kbd ale-local-leader-key) meow-leader-keymap)
  (define-key meow-motion-state-keymap
    (kbd (concat ale-local-leader-key " " ale-local-leader-key)) 'switch-to-buffer)
  (setq meow-visit-sanitize-completion nil)
  (setq meow-use-clipboard t)
  (setq meow-esc-delay 0.001)
  (setq meow-keypad-describe-delay 0.5)
  (setq meow-select-on-change t)
  (setq meow-cursor-type-normal 'box)
  (setq meow-cursor-type-insert '(bar . 4))
  (setq meow-cursor-type-default 'hbar)
  (setq meow-selection-command-fallback
        '((meow-replace . meow-yank)
          (meow-reverse . back-to-indentation)
          (meow-change . meow-change-char)
          (ale-save . ale-pulse-save-line)
          (meow-kill . ale-kill-whole-line)
          (meow-cancel . keyboard-quit)
          (meow-pop . meow-pop-grab)
          (meow-delete . meow-C-d)))
  (setq meow-char-thing-table
        '((?r . round)
          (?\[ . square)
          (?c . curly)
          (?s . string)
          (?e . symbol)
          (?w . window)
          (?b . buffer)
          (?p . paragraph)
          (?\^? . line)
          (?' . line)
          (?d . defun)
          (?i . indent)
          (?t . tag)
          (?x . extend)))
  (add-to-list 'meow-mode-state-list '(helpful-mode . normal)))

(with-eval-after-load 'consult
  (bind-keys
   :map ale-consult-map
   ("/" . consult-line-multi)
   ("e" . consult-compile-error)
   ("r" . consult-ripgrep)
   ("k" . consult-keep-lines)
   ("i" . consult-imenu-multi)
   ("f" . consult-focus-lines)
   ("n" . consult-outline)
   ("o" . consult-org-heading)
   ("R" . consult-register)
   ("y" . consult-yank-from-kill-ring)
   ("m" . consult-minor-mode-menu)
   ("c" . consult-complex-command)
   ("C" . consult-mode-command)))

;; For historical reason, terminal can not tell the difference between
;; some key storkes. For example, `C-i' and `<tab>', `C-m' and
;; `Return', etc. By default, emacs follow this convention, but it
;; doesn't mean emacs are not able to tell the difference. To change
;; this behaviour, we can use `input-decode-map' to give `C-m'
;; different meaning.
(add-hook 'after-make-frame-functions
          (lambda (f) (with-selected-frame f
                   (when window-system
                     (define-key input-decode-map [?\C-i] [C-i])))))

(provide 'core-bindings)
